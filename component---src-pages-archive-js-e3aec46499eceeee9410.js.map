{"version":3,"sources":["webpack:///./src/pages/archive.js"],"names":["pageQuery","ArchivePage","props","data","allPosts","allMarkdownRemark","edges","useState","filteredData","query","state","setState","posts","labels","site","siteMetadata","title","keywords","className","type","aria-label","placeholder","onChange","event","console","log","target","value","filter","post","node","frontmatter","tags","toLowerCase","includes","join","map","key","id","to","fields","slug","date","excerpt","techTags","forEach","tag","i","label","push","tech","name","size","color","getTechTags"],"mappings":"4FAAA,kJAmHaA,EAAS,aAwCPC,UAlJK,SAAAC,GAAU,IACpBC,EAASD,EAATC,KACFC,EAAWD,EAAKE,kBAAkBC,MAFb,EAMDC,mBAAS,CACjCC,aAAc,GACdC,MAJiB,KAEZC,EANoB,KAMbC,EANa,KAgCnBH,EAAwBE,EAAxBF,aAAcC,EAAUC,EAAVD,MAEhBG,EADmBJ,GA7BN,KA6BsBC,EACRD,EAAeJ,EAE1CS,EAASV,EAAKW,KAAKC,aAAaF,OAuBtC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAM,UACNC,SAAU,CAAC,SAAD,2DASZ,yBAAKC,UAAU,cACb,yBAAKA,UAAU,qBACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,cAAd,aACA,2BACEA,UAAU,cACVC,KAAK,OACLC,aAAW,SACXC,YAAY,0BACZC,SAxEgB,SAAAC,GACxBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,IAAMlB,EAAQc,EAAMG,OAAOC,MAGrBnB,GAFWN,EAATC,KACWE,kBAAkBC,OAAS,IACnBsB,QAAO,SAAAC,GAAS,IAAD,EAChBA,EAAKC,KAAKC,YAA1Bf,EADgC,EAChCA,MAAOgB,EADyB,EACzBA,KACf,OACEhB,EAAMiB,cAAcC,SAASzB,EAAMwB,gBAClCD,GACCA,EACGG,KAAK,IACLF,cACAC,SAASzB,EAAMwB,kBAGxBtB,EAAS,CACPF,QACAD,oBAwDKI,EAAMwB,KAAI,SAAAP,GACT,IAAMG,EAAOH,EAAKC,KAAKC,YAAYC,KACnC,OACE,yBAAKK,IAAKR,EAAKC,KAAKQ,GAAIpB,UAAU,kBAChC,kBAAC,OAAD,CAAMqB,GAAIV,EAAKC,KAAKU,OAAOC,KAAMvB,UAAU,aACzC,wBAAIA,UAAU,SAASW,EAAKC,KAAKC,YAAYf,QAE/C,2BAAOE,UAAU,qBACf,4CAAkBW,EAAKC,KAAKC,YAAYW,OAE1C,uBAAGxB,UAAU,iBAAiBW,EAAKC,KAAKa,SACxC,yBAAKzB,UAAU,WA1DT,SAAAc,GAClB,IAAMY,EAAW,GAiBjB,OAhBAZ,EAAKa,SAAQ,SAACC,EAAKC,GACjBlC,EAAOgC,SAAQ,SAAAG,GACTF,IAAQE,EAAMF,KAChBF,EAASK,KACP,kBAAC,IAAD,CACEZ,IAAKU,EACLD,IAAKE,EAAMF,IACXI,KAAMF,EAAME,KACZC,KAAMH,EAAMG,KACZC,KAAMJ,EAAMI,KACZC,MAAOL,EAAMK,eAMhBT,EAwC+BU,CAAYtB","file":"component---src-pages-archive-js-e3aec46499eceeee9410.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport \"../stylesheets/application.scss\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Sidebar from \"../components/sidebar/Sidebar\";\nimport TechTag from \"../components/tags/TechTag\";\n\nconst ArchivePage = props => {\n  const { data } = props\n  const allPosts = data.allMarkdownRemark.edges;\n\n  const emptyQuery = \"\"\n\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n\n  const handleInputChange = event => {\n    console.log(event.target.value)\n    const query = event.target.value\n    const { data } = props\n    const posts = data.allMarkdownRemark.edges || []\n    const filteredData = posts.filter(post => {\n      const { title, tags } = post.node.frontmatter\n      return (\n        title.toLowerCase().includes(query.toLowerCase()) ||\n        (tags &&\n          tags\n            .join(\"\")\n            .toLowerCase()\n            .includes(query.toLowerCase()))\n      )\n    })\n    setState({\n      query,\n      filteredData,\n    })\n  }\n  const { filteredData, query } = state\n  const hasSearchResults = filteredData && query !== emptyQuery\n  const posts = hasSearchResults ? filteredData : allPosts\n\n  const labels = data.site.siteMetadata.labels;\n\n  const getTechTags = tags => {\n    const techTags = [];\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />\n          );\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Archive\"\n        keywords={[\n          `gatsby`,\n          `javascript`,\n          `react`,\n          `web development`,\n          `blog`,\n          `graphql`\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          <h2 className=\"title mt-3\">All Posts</h2>\n          <input\n            className=\"searchInput\"\n            type=\"text\"\n            aria-label=\"Search\"\n            placeholder=\"Type to filter posts...\"\n            onChange={handleInputChange}\n            />\n          {posts.map(post => {\n            const tags = post.node.frontmatter.tags;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>Được đăng vào {post.node.frontmatter.date}</i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ArchiveQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD-MM-YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ArchivePage;\n"],"sourceRoot":""}